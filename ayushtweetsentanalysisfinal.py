# -*- coding: utf-8 -*-
"""AYUSHtweetsentanalysisFINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uSBP4eyI3cya5FsnIqXOiVqQpHzxbNiC
"""

# This is a Tweet Sentiment Analysis program that parses tweets scraped from twitter using Python, and then tells the user what kind of sentiment 
# the tweet represents - Positive, Negative or Neutral

# Importing libraries to be used in the code
import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import numpy as nupy
import pandas as pand
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# Twitter API credentials
consumerKey = 'sKK4RcfLdVvfz1sOU6jgez4ch'
consumerSecret = '23YjSUz1yerd27DfIs63uP2xawAf1loPNdNwg2FvTucd3F4aeh'
accessToken = '1280815370308386818-tuGw07SclxLMixBDu4Iubwmk9cusMK'
accessTokenSecret = 'EKRYi2DbjPhocXlqSdrNkl75qxgEmJex9E6kxAlpXX7Sg'

# Creating an authentication object
auth = tweepy.OAuthHandler(consumerKey, consumerSecret)

# Setting access token and access token secret
auth.set_access_token(accessToken, accessTokenSecret)

# Creating API object while passing in the auth information
twtapi = tweepy.API(auth, wait_on_rate_limit = True)

# Extracting data from twitter user
posts = twtapi.user_timeline(screen_name ="JoeBiden", count= 100, lang = "en", tweet_mode="extended")

# Printing recent tweets
print("Display the 5 most recent tweets: \n")
i = 1
for tweet in posts[0:5]:
  print(str(i) + ') ' + tweet.full_text + '\n')
  i = i + 1

# Creating a dataframe
dafr = pand.DataFrame( [tweet.full_text for tweet in posts], columns=['Tweets'])

# Displaying the first 5 rows
dafr.head()

# Creating a function to clean the tweets
def clean(text):
 text = re.sub('@[A-Za-z0â€“9]+', '', text) #Removing @mentions
 text = re.sub('#', '', text) # Removing '#' hash tag
 text = re.sub('RT[\s]+', '', text) # Removing Retweet
 text = re.sub('https?:\/\/\S+', '', text) # Removing hyperlink
 
 return text


# Cleaning the tweets
dafr['Tweets'] = dafr['Tweets'].apply(clean)

# Displaying the tweets after cleaning data
dafr

# Creating a function to get the subjectivity
def getsubj(text):
   return TextBlob(text).sentiment.subjectivity

# Creating a function to get the polarity
def getpol(text):
   return  TextBlob(text).sentiment.polarity


# Creating two new columns 'Subjectivity' & 'Polarity'
dafr['Subjectivity'] = dafr['Tweets'].apply(getsubj)
dafr['Polarity'] = dafr['Tweets'].apply(getpol)

# Displaying the new dataframe with columns 'Subjectivity' & 'Polarity'
dafr

# Creating a function to compute negative (-1), neutral (0) and positive (+1) analysis
def sentanalysis(score):

  if score < 0:
    return 'Negative'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positive'

dafr['Analysis'] = dafr['Polarity'].apply(sentanalysis)

# Displaying the updated dataframe
dafr

# Creating a word cloud
words = ' '.join([twts for twts in dafr['Tweets']])
allwordscloud = WordCloud(width=600, height=400, random_state=21, max_font_size=100).generate(words)

# Displaying the word cloud
plt.imshow(allwordscloud, interpolation="bilinear")
plt.axis('off')
plt.show()

# Printing all positive tweets in an ordered list
print('All positive tweets:\n')
x=1
sorteddata = dafr.sort_values(by=['Polarity']) # Sorting all tweets
for y in range(0, sorteddata.shape[0] ):
  if( sorteddata['Analysis'][y] == 'Positive'):
    print(str(x) + ') '+ sorteddata['Tweets'][y])
    print()
    x= x+1

# Printing the percentage of all positive tweets
postwts = dafr[dafr.Analysis == 'Positive']
postwts = postwts['Tweets']
postwts

round((postwts.shape[0] / dafr.shape[0]) * 100 , 1)

# Printing all negative tweets in an ordered list 
print('All negative tweets:\n')
a=1
sorteddata = dafr.sort_values(by=['Polarity'],ascending=False) # Sorting all tweets
for b in range(0, sorteddata.shape[0] ):
  if( sorteddata['Analysis'][b] == 'Negative'):
    print(str(a) + ') '+sorteddata['Tweets'][b])
    print()
    a=a+1

# Printing the percentage of all negative tweets
negtwts = dafr[dafr.Analysis == 'Negative']
negtwts = negtwts['Tweets']
negtwts

round((negtwts.shape[0] / dafr.shape[0]) * 100, 1)

# Distribution of tweets in different categories of sentiment
dafr['Analysis'].value_counts()

# Plotting the tweet distribution on a graph
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
dafr['Analysis'].value_counts().plot(kind = 'bar')
plt.show()

# Plotting a Subjectivity vs Polarity graph
plt.figure(figsize=(10,8)) 
for i in range(0, dafr.shape[0]):
  plt.scatter(dafr["Polarity"][i], dafr["Subjectivity"][i], color='Red') 
# plt.scatter(x,y,color)   
plt.title('Tweet Sentiment Analysis') 
plt.xlabel('Polarity') 
plt.ylabel('Subjectivity') 
plt.show()